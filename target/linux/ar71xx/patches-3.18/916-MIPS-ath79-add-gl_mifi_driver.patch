--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -1037,6 +1037,7 @@ static const struct usb_device_id option
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7A) },
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7B) },
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7C) },
+	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7D) },
 
 
 	{ USB_DEVICE(NOVATELWIRELESS_VENDOR_ID, NOVATELWIRELESS_PRODUCT_V640) },
@@ -1818,6 +1819,11 @@ static const struct usb_device_id option
 	{ USB_DEVICE_INTERFACE_CLASS(0x2020, 0x4000, 0xff) },                /* OLICARD300 - MT6225 */
 	{ USB_DEVICE(INOVIA_VENDOR_ID, INOVIA_SEW858) },
 	{ USB_DEVICE(VIATELECOM_VENDOR_ID, VIATELECOM_PRODUCT_CDS7) },
+	{ USB_DEVICE(0x05C6, 0x9090) },              //For Quectell UC15
+	{ USB_DEVICE(0x05C6, 0x9003) },              //For Quectel UC20
+	{ USB_DEVICE(0x05C6, 0x9215) },             //For Quectel EC20
+	{ USB_DEVICE(0x2c7c, 0x0125) },             //For Quectel EC25 EC20 R2.0
+	{ USB_DEVICE(ZTE_VENDOR_ID, 0x0016) }, //For ZTE ME3620
 	{ } /* Terminating entry */
 };
 MODULE_DEVICE_TABLE(usb, option_ids);
@@ -1852,6 +1858,7 @@ static struct usb_serial_driver option_1
 #ifdef CONFIG_PM
 	.suspend           = usb_wwan_suspend,
 	.resume            = usb_wwan_resume,
+	.reset_resume      = usb_wwan_resume,
 #endif
 };
 
@@ -1919,6 +1926,13 @@ static int option_probe(struct usb_seria
 	    iface_desc->bInterfaceClass != USB_CLASS_CDC_DATA)
 		return -ENODEV;
 
+	if (dev_desc->idVendor == 0x05C6 && (dev_desc->idProduct == 0x9003
+			|| dev_desc->idProduct == 0x9090 || dev_desc->idProduct == 0x9215)) {
+		pm_runtime_set_autosuspend_delay(&serial->dev->dev, 3000);
+		usb_enable_autosuspend(serial->dev);
+		device_init_wakeup(&serial->dev->dev, 1); //usb remote wakeup
+	}
+
 	/* Store device id so we can use it during attach. */
 	usb_set_serial_data(serial, (void *)id);
 
@@ -1932,6 +1946,11 @@ static int option_attach(struct usb_seri
 	struct usb_wwan_intf_private *data;
 	struct option_private *priv;
 
+    if (serial->dev->descriptor.idVendor == HUAWEI_VENDOR_ID) {
+		if ( 0 != (serial->dev->config->desc.bmAttributes & 0x20)){
+			usb_enable_autosuspend(serial->dev);
+		}
+	}
 	data = kzalloc(sizeof(struct usb_wwan_intf_private), GFP_KERNEL);
 	if (!data)
 		return -ENOMEM;
@@ -1956,6 +1975,15 @@ static int option_attach(struct usb_seri
 	}
 	spin_lock_init(&data->susp_lock);
 
+	//Quectel UC20's interface 4 can be used as USB Network device
+	if (serial->dev->descriptor.idVendor == 0x05C6 && serial->dev->descriptor.idProduct ==0x9003 &&
+		serial->interface->cur_altsetting->desc.bInterfaceNumber == 4)
+		return -ENODEV;
+	//Quectel EC20's interface 4 can be used as USB Network device
+	if (serial->dev->descriptor.idVendor == 0x05C6 && serial->dev->descriptor.idProduct ==0x9215 &&
+		serial->interface->cur_altsetting->desc.bInterfaceNumber == 4)
+		return -ENODEV;
+
 	usb_set_serial_data(serial, data);
 
 	return 0;
--- a/drivers/usb/serial/qcserial.c
+++ b/drivers/usb/serial/qcserial.c
@@ -90,7 +90,6 @@ static const struct usb_device_id id_tab
 	{USB_DEVICE(0x03f0, 0x241d)},	/* HP Gobi 2000 QDL device (VP412) */
 	{USB_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
 	{USB_DEVICE(0x05c6, 0x9214)},	/* Acer Gobi 2000 QDL device (VP413) */
-	{USB_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
 	{USB_DEVICE(0x05c6, 0x9264)},	/* Asus Gobi 2000 QDL device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9234)},	/* Top Global Gobi 2000 QDL device (VR306) */
--- a/drivers/usb/serial/usb-wwan.h
+++ b/drivers/usb/serial/usb-wwan.h
@@ -30,6 +30,8 @@ extern int usb_wwan_resume(struct usb_se
 #define N_OUT_URB 4
 #define IN_BUFLEN 4096
 #define OUT_BUFLEN 4096
+#define HW_bcdUSB 0x0110
+#define HUAWEI_VENDOR_ID 0x12d1
 
 struct usb_wwan_intf_private {
 	spinlock_t susp_lock;
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -186,6 +186,7 @@ int usb_wwan_write(struct tty_struct *tt
 	int i;
 	int left, todo;
 	struct urb *this_urb = NULL;	/* spurious */
+	struct usb_host_endpoint *ep=NULL;
 	int err;
 	unsigned long flags;
 
@@ -222,6 +223,16 @@ int usb_wwan_write(struct tty_struct *tt
 		memcpy(this_urb->transfer_buffer, buf, todo);
 		this_urb->transfer_buffer_length = todo;
 
+		if((HUAWEI_VENDOR_ID == port->serial->dev->descriptor.idVendor)
+				&& (HW_bcdUSB != port->serial->dev->descriptor.bcdUSB)){
+					ep = usb_pipe_endpoint(this_urb->dev, this_urb->pipe);
+					if(ep && (0 != this_urb->transfer_buffer_length)
+							&& (0 == this_urb->transfer_buffer_length %
+								ep->desc.wMaxPacketSize)){
+									this_urb->transfer_flags |= URB_ZERO_PACKET;
+					}
+		}
+
 		spin_lock_irqsave(&intfdata->susp_lock, flags);
 		if (intfdata->suspended) {
 			usb_anchor_urb(this_urb, &portdata->delayed);
@@ -471,6 +482,13 @@ static struct urb *usb_wwan_setup_urb(st
 			  usb_sndbulkpipe(serial->dev, endpoint) | dir,
 			  buf, len, callback, ctx);
 
+	if (dir == USB_DIR_OUT) {
+		struct usb_device_descriptor *desc = &serial->dev->descriptor;
+		if (desc->idVendor == 0x05C6 && (desc->idProduct == 0x9003 || desc->idProduct ==
+					0x9090 || desc->idProduct == 0x9215))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+	}
+
 	return urb;
 }
 
--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -554,7 +554,6 @@ static const struct usb_device_id produc
 	{QMI_FIXED_INTF(0x05c6, 0x8000, 7)},
 	{QMI_FIXED_INTF(0x05c6, 0x8001, 6)},
 	{QMI_FIXED_INTF(0x05c6, 0x9000, 4)},
-	{QMI_FIXED_INTF(0x05c6, 0x9003, 4)},
 	{QMI_FIXED_INTF(0x05c6, 0x9005, 2)},
 	{QMI_FIXED_INTF(0x05c6, 0x900a, 4)},
 	{QMI_FIXED_INTF(0x05c6, 0x900b, 2)},
@@ -789,6 +788,8 @@ static const struct usb_device_id produc
 	{QMI_FIXED_INTF(0x413c, 0x81a4, 8)},	/* Dell Wireless 5570e HSPA+ (42Mbps) Mobile Broadband Card */
 	{QMI_FIXED_INTF(0x413c, 0x81a8, 8)},	/* Dell Wireless 5808 Gobi(TM) 4G LTE Mobile Broadband Card */
 	{QMI_FIXED_INTF(0x413c, 0x81a9, 8)},	/* Dell Wireless 5808e Gobi(TM) 4G LTE Mobile Broadband Card */
+	{QMI_FIXED_INTF(0x05c6, 0x9003, 4)},	/* Quectel UC20 */
+	{QMI_FIXED_INTF(0x05c6, 0x9215, 4)},	/* Quectel EC20 */
 
 	/* 4. Gobi 1000 devices */
 	{QMI_GOBI1K_DEVICE(0x05c6, 0x9212)},	/* Acer Gobi Modem Device */
@@ -818,7 +819,6 @@ static const struct usb_device_id produc
 	{QMI_GOBI_DEVICE(0x05c6, 0x9225)},	/* Sony Gobi 2000 Modem device (N0279, VU730) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9245)},	/* Samsung Gobi 2000 Modem device (VL176) */
 	{QMI_GOBI_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
-	{QMI_GOBI_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9235)},	/* Top Global Gobi 2000 Modem device (VR306) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9275)},	/* iRex Technologies Gobi 2000 Modem device (VR307) */
@@ -827,7 +827,6 @@ static const struct usb_device_id produc
 	{QMI_GOBI_DEVICE(0x1199, 0x68a9)},	/* Sierra Wireless Modem */
 	{QMI_GOBI_DEVICE(0x1199, 0x9001)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
 	{QMI_GOBI_DEVICE(0x1199, 0x9002)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
-	{QMI_GOBI_DEVICE(0x1199, 0x9003)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
 	{QMI_GOBI_DEVICE(0x1199, 0x9004)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
 	{QMI_GOBI_DEVICE(0x1199, 0x9005)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
 	{QMI_GOBI_DEVICE(0x1199, 0x9006)},	/* Sierra Wireless Gobi 2000 Modem device (VT773) */
--- a/drivers/usb/class/cdc-wdm.c
+++ b/drivers/usb/class/cdc-wdm.c
@@ -848,6 +848,18 @@ static int wdm_create(struct usb_interfa
 		goto err;
 	else
 		dev_info(&intf->dev, "%s: USB WDM device\n", dev_name(intf->usb_dev));
+		/* add Quectel auto connect feature */
+	usb_control_msg(
+		interface_to_usbdev(intf),
+		usb_sndctrlpipe(interface_to_usbdev(intf), 0),
+		0x22, //SET_CONTROL_LINE_STATE_REQUEST,
+		0x21, //SET_CONTROL_LINE_STATE_REQUEST_TYPE,
+		0x01, //CONTROL_DTR,
+		cpu_to_le16((u16)intf->cur_altsetting->desc.bInterfaceNumber),
+		NULL,
+		0,
+		100
+	);
 out:
 	return rv;
 err:
@@ -959,10 +971,22 @@ static void wdm_disconnect(struct usb_in
 	struct wdm_device *desc;
 	unsigned long flags;
 
+	usb_control_msg(
+		interface_to_usbdev(intf),
+		usb_sndctrlpipe(interface_to_usbdev(intf), 0),
+		0x22, //SET_CONTROL_LINE_STATE_REQUEST,
+		0x21, //SET_CONTROL_LINE_STATE_REQUEST_TYPE,
+		0, // DTR not present
+		cpu_to_le16((u16)intf->cur_altsetting->desc.bInterfaceNumber),
+		NULL,
+		0,
+		100
+	);
 	usb_deregister_dev(intf, &wdm_class);
 	desc = wdm_find_device(intf);
 	mutex_lock(&wdm_mutex);
 
+
 	/* the spinlock makes sure no new urbs are generated in the callbacks */
 	spin_lock_irqsave(&desc->iuspin, flags);
 	set_bit(WDM_DISCONNECTING, &desc->flags);
