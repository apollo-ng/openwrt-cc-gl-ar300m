#!/usr/bin/python
import socket
import os
import time
import sys
import re


def communicate(command):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    try:
        sock.connect('/var/run/pineap.sock')
        sock.send(command)
    except:
        print 'Error connecting to PineAP. Have you started it yet?'


def start_pineAP():
    print "Starting PineAP. This may take a few seconds."
    stop_pineAP()
    os.system("if ! ifconfig -a | grep -q wlan1mon; then airmon-ng start wlan1 &>/dev/null; fi;")
    os.system("echo 'pinejector wlan1mon'| at now &> /dev/null")
    os.system("mac=$(ifconfig wlan0 | grep HWaddr | awk '{print $5}'); chan=$(iw dev wlan0 info | grep channel | awk '{print $2}'); echo 'pineap '$chan' '$mac | at now &> /dev/null")
    print "PineAP started."


def stop_pineAP():
    os.system("killall pinejector &> /dev/null")
    os.system("killall pineap &> /dev/null")


def check_MAC(mac):
    return bool(re.match("([a-fA-F0-9]{2}[:]?){6}$", mac))


def interpret_commands(commands):
    if len(commands) < 2:
        print_usage()
        sys.exit()

    fail = False

    if commands[1] == "start":
        start_pineAP()
        sys.exit()
    elif commands[1] == "stop":
        stop_pineAP()
        sys.exit()
    elif commands[1] == "clear_ssids":
        communicate("clear_ssids")
        sys.exit()

    if len(commands) < 3:
        print_usage()
        sys.exit()

    if commands[1] == "dogma":
        if commands[2] == "start":
            communicate("beaconer:on")
        elif commands[2] == "stop":
            communicate("beaconer:off")
        else:
            fail = True
    elif commands[1] == "responder":
        if commands[2] == "start":
            communicate("responder:on")
        elif commands[2] == "stop":
            communicate("responder:off")
        else:
            fail = True
    elif commands[1] == "harvester":
        if commands[2] == "start":
            communicate("harvest:on")
        elif commands[2] == "stop":
            communicate("harvest:off")
        else:
            fail = True
    elif commands[1] == "settarget":
        if check_MAC(commands[2]):
            communicate("target:" + commands[2])
        else:
            fail = True
    elif commands[1] == "setsource":
        if check_MAC(commands[2]):
            communicate("source:" + commands[2])
        else:
            fail = True
    elif commands[1] == "addssid":
        communicate("add_ssid:" + commands[2])
    elif commands[1] == "delssid":
        communicate("del_ssid:" + commands[2])
        os.system("sed -r '/^(" + commands[2] + ")$/d' -i /etc/pineapple/ssid_file")
    elif commands[1] == "beaconinterval":
        if commands[2] == "low":
            communicate("beacon_interval:low")
        elif commands[2] == "normal":
            communicate("beacon_interval:normal")
        elif commands[2] == "fast":
            communicate("beacon_interval:aggressive")
        else:
            fail = True
    elif commands[1] == "responseinterval":
        if commands[2] == "low":
            communicate("response_interval:low")
        elif commands[2] == "normal":
            communicate("response_interval:normal")
        elif commands[2] == "fast":
            communicate("response_interval:aggressive")
        else:
            fail = True
    elif commands[1] == "deauth":
        if len(commands) >= 5:
            if check_MAC(commands[2]) and check_MAC(commands[3]):
                if len(commands) == 6:
                    multiplier = commands[5]
                else:
                    multiplier = "1";
                communicate("deauth:" + commands[2] + commands[3] + commands[4].zfill(2) + multiplier)
            else:
                fail = True
        else:
            fail = True
    else:
        fail = True

    if fail:
        print_usage()


def print_usage():
    half_tab = "   "

    print ""

    print "PineAP command line utility"
    print "Usage: infusion pineap <option> [arguments]"
    print ""

    print "Options:"
    print half_tab + "start \t\t\t - starts PineAP"
    print half_tab + "stop \t\t\t - stops PineAP"

    print ""

    print half_tab + "dogma [start|stop] \t\t - starts / stops Dogma"
    print half_tab + "responder [start|stop] \t - starts / stops Beacon Response"
    print half_tab + "harvester [start|stop] \t - starts / stops Auto Harvester"

    print ""

    print half_tab + "setsource [mac] \t\t - set PineAP's source. eg: aa:bb:cc:dd:ee:ff"
    print half_tab + "settarget [mac] \t\t - set PineAP's target. eg: aa:bb:cc:dd:ee:ff"

    print ""

    print half_tab + "beaconinterval   [low, normal, fast] \t - Change Beacon interval"
    print half_tab + "responseinterval [low, normal, fast] \t - Change Response interval"

    print ""

    print half_tab + "addssid [ssid] \t\t- Adds SSID to PineAP."
    print half_tab + "delssid [ssid] \t\t- Deletes SSID from PineAP."
    print half_tab + "clear_ssids    \t\t- Clears all SSIDs"
    print ""

    print half_tab + "deauth [client] [AP] [channel] [multip] - Deauthenticates client from an AP."
    print half_tab + "                                          Client / AP eg: aa:bb:cc:dd:ee:ff"
    print half_tab + "                                          Channel: 1-14"
    print half_tab + "                                          Multiplier (optional): Integer"

    print ""


if __name__ == "__main__":
    interpret_commands(sys.argv)
